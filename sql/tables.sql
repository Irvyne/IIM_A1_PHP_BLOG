-- phpMyAdmin SQL Dump
-- version 3.5.1
-- http://www.phpmyadmin.net
--
-- Client: localhost
-- Généré le: Dim 17 Mars 2013 à 23:11
-- Version du serveur: 5.5.24-log
-- Version de PHP: 5.4.3

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Base de données: `php1_iim`
--

-- --------------------------------------------------------

--
-- Structure de la table `article`
--

CREATE TABLE IF NOT EXISTS `article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `enabled` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=16 ;

--
-- Contenu de la table `article`
--

INSERT INTO `article` (`id`, `title`, `content`, `date`, `enabled`) VALUES
(1, 'AprÃ¨s lâ€™annonce de lâ€™arrÃªt de Google Reader, Feedly rÃ©cupÃ¨re 500 000 utilisateurs', 'AprÃ¨s lâ€™annonce retentissante faite par Google la semaine derniÃ¨re sur son arrÃªt de Reader, les utilisateurs de son service semblent avoir dÃ©jÃ  entrepris la recherche dâ€™une nouvelle terre pour leurs bons vieux flux RSS. De toute Ã©vidence, Feedly fait partie des grands gagnants.\r\n\r\nLâ€™agrÃ©gateur, prÃ©sent sur la toile depuis 2008, a ainsi rÃ©vÃ©lÃ© ce week-end sur son blog officiel avoir comptabilisÃ© pas moins dâ€™un demi-million dâ€™inscriptions Ã  son service en seulement 48 heures. Si lâ€™on en croit leurs dires, celles-ci proviendraient dans leur intÃ©gralitÃ© dâ€™actuels utilisateurs de Google Reader.\r\n\r\nLa dÃ©cision prise par Google de mettre fin Ã  Reader aura soulevÃ© des torrents de protestations sur la toile, la pÃ©tition crÃ©Ã©e Ã  cet effet sur change.org regroupant Ã  ce jour plus de 120 000 signatures.\r\n\r\nDe leur cÃ´tÃ©s, les serveurs de Feedly semblent avoir pris un sacrÃ© coup de chaud suite Ã  lâ€™impressionnante masse de visites subites constatÃ©es, et lâ€™Ã©quipe a dâ€™ailleurs fait du maintien de lâ€™activitÃ© de son service sa prioritÃ© numÃ©ro 1. Parmi les autres Ã©voquÃ©es dans son article : lâ€™Ã©coute et la prise en compte des suggestions des nouveaux utilisateurs et lâ€™ajout de nouvelles fonctionnalitÃ©s chaque semaine.\r\n\r\nProfitant (Ã  juste titre) de lâ€™occasion, Feedly a mÃªme publiÃ© un post prÃ©sentant Ã  ses utilisateurs quelques astuces qui leurs permettront de configurer leur compte de maniÃ¨re Ã  ce que celui-ci se rapproche le plus de leur bien-aimÃ© Google Reader, par lâ€™affichage dâ€™une vue condensÃ©e, Â« moins esthÃ©tique, mais plus fonctionnelle Â».\r\n\r\nFeedly, qui se base encore aujourdâ€™hui sur lâ€™API de Google Reader, tient Ã  rassurer ses utilisateurs : lâ€™Ã©quipe travaillerait dÃ©jÃ  depuis quelques temps sur un projet de substitution de cette derniÃ¨re, nom de code Â« Normandie Â». Au jour de la fermeture officielle de Reader, Feedly effectuera en toute transparence la transition vers Â« Normandie Â», nâ€™interfÃ©rant en rien avec lâ€™expÃ©rience utilisateur.\r\n\r\nPour finir, lâ€™application iOS de Feedly est passÃ©e premiÃ¨re du classement des applications gratuites sur lâ€™Apple Store en cette fin de semaine.\r\n\r\nUne chose est sure : cette semaine, le cÃ©lÃ¨bre adage Â« le malheur des uns fait le bonheur des autres Â» sied comme un gant Ã  la situation de Feedly.', '2013-03-17 23:02:37', 1),
(2, 'Don''t use PHP libraries with known security issues', 'If you are a "connected" developer, you are probably aware of the major vulnerabilities found in Ruby on Rails recently. To be fair, we''ve also found some serious issues in the Symfony code during the last few months.\r\n\r\nAs security management should be a top most priority for us and our customers, I''ve recently worked on improving the current situation in the Symfony world, with an enhanced security process. But security management is also a very important topic for me because Symfony is quickly growing in popularity for both end-user projects and Open-Source ones; and more exposure also means more interest from the "bad guys".\r\n\r\nOne of the goal of good security issues management is transparency. That''s why the Symfony project has a simple way of reporting security issues (via the security [at] symfony.com email address), an easily accessible list of security advisories, and a well defined blog post template to announce security issues. Recently, we have also enforced the need to have a CVE identifier for all security issues to help the broader community to be aware of Symfony security issues.\r\n\r\nThe best advice one can give you is to upgrade your favorite libraries as soon as possible when new versions with security fixes are released. Easier say than done.\r\n\r\nHow do you know that a new release is out? How do you know that it contains security fixes? For Symfony, you can subscribe to the RSS feed of the Symfony blog, or you can have a look at our security advisories from time to time. But sometimes, that''s not possible as the project does not even have a blog. Was the security fix announced on Twitter? Quite possible. But most of the time, smaller libraries just release a new version without any proper security announcement.\r\n\r\nBut I want to provide a simple and efficient way to check for vulnerabilities in a project and I want to serve more than just the Symfony community. That''s why I''m really proud to announce a new SensioLabs initiative: a simple way to check if your project depends on third-party libraries with known security issues. The website explains how it works in details (https://security.sensiolabs.org/), but basically, this initiative gives you several ways to check for security issues in your project dependencies based on the information contained in you composer.lock file (you are using Composer to manage your dependencies, right?):\r\n\r\nThe website itself allows you to upload a composer.lock to check for vulnerabilities;\r\n\r\nA web service can used with curl or to integrate that tool into your own continuous integration process (it returns its results as plain text or as a JSON array);\r\n\r\nA command line tool gives you the same feature as the web service and the website but nicely packaged as a simple Symfony command.\r\n\r\nOf course, the most important part of this initiative is the database where known security vulnerabilities are referenced. The database is hosted on Github: https://github.com/sensiolabs/security-advisories. We have already referenced known vulnerabilities for Symfony, Zend Framework, and some well-known Symfony bundles, but the idea is for the community to help us add more libraries and more importantly to update the database whenever a security issue is fixed in a library. Even if you don''t have a way to easily announce your security fix to the world, at least, reference it in the database; contributing to the database is really easy: fork the repository, contribute your changes, and send a pull request (you can even do everything from the Github web interface if you want).\r\n\r\nCheck your projects, upgrade your dependencies when needed, and contribute to the database!', '2013-03-17 23:04:08', 1),
(3, 'Debugging Silex applications just got fun', 'What is the difference between a full-stack framework and a micro framework? To me, this is not about the amount of code, but more about how you build an application and how you structure it. Symfony and Silex share a lot of code (Silex specific code being quite minimal), but developing an application with one or the other is a totally different experience. And choosing between the two really depends on your needs, the application you want to create, the skills of your team, etc...\r\n\r\nOne of the big advantages of both Symfony and Silex is that they are based on the Symfony HttpKernel component. Why is it an advantage? One of the reasons is the standardization of the HTTP dialog between the client and the application server and the standardization of the HTTP messages via the HttpFoundation component; that makes all applications using it easily interoperable (like Drupal, eZPublish, Laravel, and many others).\r\n\r\nBut handling HTTP requests with the Symfony HttpKernel also gives you a lot of free and optional features like a built-in reverse proxy written in PHP, easy handling of ESI and Hincludes (via the Fragment sub-framework), or the gorgeous Symfony web profiler.', '2013-03-17 23:04:33', 1),
(4, 'PHP is much better than you think', 'Rants about PHP are everywhere, and they even come from smart guys. When Jeff Atwood wrote yet another rant about PHP, it made me think about the good parts of PHP.\r\n\r\nThe biggest problem of these rants is that they come from people stuck in the old days of PHP. They either don''t care or they don''t want to admit that PHP actually evolves at a very fast pace, both at the language level but also at the community level. In fact, it evolves much faster than any other language or web platform. It has not always been the case, but the last 5 years have been an amazing journey for PHP.\r\n\r\nBefore talking about the amazing things the PHP community has achieved recently, let''s have a look at some interesting numbers: PHP is used by 77.9% of all the websites whose server-side programming language is known. WordPress is used by 16.6% of all the websites in the world. If you have a look at the top three CMSes, for the websites that use a monitored content management system: Wordpress is first with 54.3%, Joomla is second with 9.2%, and Drupal is third with 6.8%. Three products written in PHP.\r\n\r\nPHP must have done something right, no?\r\n\r\nNow, let me tell you a secret, the PHP "tour de force": Despite the changes over the years, PHP is still the easiest language to learn for non-technical people: it allows anyone to create dynamic websites faster than with any other technologies, it allows anyone to host websites cheaply and without any hassles. PHP is probably not the best designed language in the world, but it lets you get things done, and you can''t argue with that.\r\n\r\nPHP, the Language\r\nPHP 5.0 (released in 2004) brought us a very solid object model... wait a minute, I''m talking about something released almost 8 years ago. Fast forward now. The latest PHP release, PHP 5.4, comes with all the bells and whistles you might dream of in a modern web language: yes, PHP supports namespaces; yes, PHP supports closures; yes, PHP supports traits.\r\n\r\nIt took some time, but PHP 5.4 also comes with some nice syntactic sugar that makes the whole experience better than ever: yes, PHP supports [] to define arrays; yes, PHP supports calling a method on a newly created object ((new Foo())->bar()); yes, PHP supports getting an array item from any expression ($foo->bar()[1]).\r\n\r\nPHP has even learned from its mistakes: register_globals and magic_quotes are definitely gone.\r\n\r\nLast, but not the least, PHP even comes with a built-in web server that eases local testing... and it starts in a matter of micro-seconds.\r\n\r\nNext challenges: How do we "upgrade" all the old tutorials talking about PHP on the web? What is the best way to support the WebSocket technology in a PHP application?\r\n\r\nPHP, the Ecosystem\r\nHaving a good language is great, but having a great ecosystem is even better. And the PHP ecosystem has evolved a lot in the last few years.\r\n\r\nGit\r\n\r\nI won''t talk too much about this one. Git is everywhere and PHP embraced Git pretty fast. Almost all major PHP libraries, frameworks, and products are now using Git, including PHP itself.\r\n\r\nComposer\r\n\r\nTwo years ago, I wanted to get rid of my ugly-PEAR-hack I did in symfony 1 to support plugins. I wanted to replace it with something that was able to manage project dependencies, not a global installer like PEAR. Managing dependencies is not an easy task, so I tried to find the best algorithm to manage software dependencies; I had a look at everything: from Perl to Ruby, from Debian to Redhat. Nothing was satisfactory: only homegrown solutions that happen to work... empirically. Then, I stumbled upon ZYpp. That was it. ZYpp uses a SAT solver to manage dependencies. Fast forward. Thanks to the hard work of Nils Adermann and Jordi Boggiano, PHP now has one of the best dependency manager, Composer.\r\n\r\nYes, PHP has a better dependency manager than any other languages.\r\n\r\nAnd thanks to Git, Composer, and the PHP built-in web server, it has never been easier to download/install/test a PHP project.\r\n\r\nWant to test Symfony (using PHP 5.4)?\r\n\r\n$ composer.phar create-project symfony/framework-standard-edition\r\n$ cd framework-standard-edition\r\n$ ./app/console server:run\r\nWant to test Silex?\r\n\r\n$ composer.phar create-project fabpot/silex-skeleton\r\n$ cd silex-skeleton\r\n$ php -S localhost:8888 -t web/\r\nDon''t know Composer yet? You should learn about it. Browse Packagist, the main Composer repository: it already has 1900+ packages available and they have been installed more than a million times in less than 3 months.\r\n\r\nNext challenge: include the Composer installer in the next PHP version?\r\n\r\nCollaboration\r\n\r\nCommunity collaboration is the most important point of this post; the one I''m the most proud of. We start to see better collaboration between PHP projects, even from the very big ones, the ones you would think are large enough to not care about the others.\r\n\r\nphpBB, Drupal, eZ Publish, Symfony, and many others (phpDocumentor, PHPUnit, Behat, Zikula, Propel, Doctrine, Midgard, ...) are sharing code. Yes, they are "competitors" but they all understood that cross-pollination was a good thing. And Composer is a good enabler.', '2013-03-17 23:04:58', 1),
(5, 'The PHP Ternary Operator: Fast or not?', 'People like micro-optimizations. They are easy to understand, easy to apply... and useless. But some time ago, while reviewing pull requests for Twig, I read an interesting discussion about the performance of the ternary operator in PHP (thanks to @nikic for the investigation).\r\n\r\nDo you know which following snippet is the fastest (of course, they do exactly the same)?\r\n\r\n// snippet 1\r\n$tmp = isset($context[''test'']) ? $context[''test''] : '''';\r\n \r\n// snippet 2\r\nif (isset($context[''test''])) {\r\n    $tmp = $context[''test''];\r\n} else {\r\n    $tmp = '''';\r\n}\r\n \r\nThe right answer is: it depends. Most of the time, they are about the same speed and you don''t need to care. But if $context[''test''] contains a large amount of data, snippet 2 is much faster than snippet 1.\r\n\r\nHere is the code I have used to test different scenarii:\r\n\r\n$context = array(''test'' => true);\r\n \r\n// optionally fill-in the test value with lots of data\r\nfor ($i = 0; $i < 100000; $i++) {\r\n    $context[''test''][$i] = $i;\r\n}\r\n// you can also just create a big string\r\n// $context = str_repeat('' '', 1000000);\r\n \r\n// benchmark\r\n$time = microtime(true);\r\nfor ($i = 0; $i < 100; $i++) {\r\n    // the snippet of code to benchmark\r\n    $tmp = isset($context[''test'']) ? $context[''test''] : '''';\r\n}\r\nprintf("TIME: %0.2d\\n", (microtime(true) - $time) * 1000);\r\n \r\nNote that the absolute performance numbers are meaningless here. We just want to compare the speed between different snippets.\r\n\r\nOn my laptop, snippet 1 takes more than two seconds, whereas snippet 2 takes about 0.05ms. That''s a big difference! But if the variable to test does not host many data, the speed is almost the same.\r\n\r\nSo, why does the ternary operator become so slow under some circumstances? Why does it depend on the value stored in the tested variable?\r\n\r\nThe answer is really simple: the ternary operator always copies the value whereas the if statement does not. Why? Because PHP uses a technique known as copy-on-write: When assigning a value to a variable, PHP does not actually create a copy of the content of the variable until it is modified.\r\n\r\nWhen you write a statement like $tmp = $context[''test''], very little happens: the $tmp variable just becomes a reference to the $context[''test''] one; that''s why it''s really fast. But as soon you want to modify the variable, PHP needs to copy the original one:\r\n\r\n$tmp = $context[''test''];\r\n \r\n// the copy happens now\r\n$tmp[] = true;\r\n \r\n// copy also happens if the original variable changes\r\n// $context[''test''][] = true;\r\n \r\nTo sum up, the speed of the ternary operator is directly related to the time it takes to copy the result of the statement, even if it is not strictly needed. And copying an array of 100000 elements takes time.\r\n\r\nIf you are using PHP 5.3, there is a simpler way to express our statement with the new ?: construct:\r\n\r\n$tmp = $context[''test''] ?: '''';\r\n \r\nUnfortunately, this new construct has the same drawbacks as the standard one as far as performance is concerned, even if PHP should probably be able to optimize the case where the variable exists.', '2013-03-17 23:06:51', 1),
(6, 'Pragmatism over Theory: Protected vs Private', 'I often favor pragmatism over theory; probably because programming is how I earn a living but also because I don''t have any computer science degree and what I know I''ve learned from my experience.\r\n\r\nIn the recent months, there have been a lot of discussions in the PHP community about the usage of private over protected visibility for methods and properties in Open-Source libraries.\r\n\r\nTo summarize my point of view:\r\n\r\n"private" is for purists and "protected" is for pragmatic developers.\r\n\r\nComing from Perl, I''ve been a strong advocate of never using private for anything (as far as I remember, there is not a single use of private in symfony1; and until recently, the usage of private was explicitly disallowed in Symfony2 -- it was even part of the Symfony2 coding standards!).\r\n\r\nSo, why Symfony2 changed its mind? Yep, I''ve just wrote Symfony2, not I. As Symfony2 is a community driven project and because we have such a large number of contributors, I''m not the only one who take decisions. And if some people have strong arguments, I''m willing to change things even if I''m not a big fan of them.\r\n\r\nAnyway, a couple of weeks ago, we have started to switch most protected properties and methods to private. And guess what, just two weeks after the change, I already have two great stories and lessons to share with you.\r\n\r\nBesides obvious mistakes we have fixed right away, all the requests we had for reverting back to protected lead to better solutions so far.\r\n\r\nFirst, someone complained about not being able to customize the Routing component. Here is the conversation we had on Twitter (translated from French):\r\n\r\n@InformatHic: The closing of the Symfony2 API is a real ordeal. (cc @fabpot)\r\n\r\n@fabpot: @InformatHic we can reopen the API if necessary. But give me examples first.\r\n\r\n@InformatHic: Finally I cleaned up my code and I must say that it is much cleaner now. (cc @fabpot)\r\n\r\nHaving a few well defined extension points force the developer to extend your library the right way instead of hacking your code.\r\n\r\nAnd now, for the second example. The Symfony2 Console component is used by many PHP libraries outside the Symfony world, like Behat. For Behat, Konstantin used to override some methods that I''ve switched from protected to private. At first, he was annoyed. But after some discussion with Bulat, they came up with a much better solution: they actually decoupled the code and added a new and clean way to solve the problem at hand and as a result, they made the component more beautiful and more customizable.\r\n\r\nClosing the API allows design flaws to be found more easily and gives you the opportunity to evolve your code by creating well defined extension points.\r\n\r\nSo, even if I still believe that using private is not a hard rule you should blindly follow, I can see some pragmatic advantages. And it''s not like we cannot change our mind if needed. Changing a private method to protected is simple and won''t break any code. But before doing that, you need to understand what the developer is trying to achieve and if you cannot find a better way to resolve his problem without opening the API too much.\r\n\r\nBy the way, public methods does not define the public API. Sometimes, you need to declare a method as public because you need to access it from another class in your library; but that does not mean that you want your users to actually call it directly. What do you do then? Symfony and Flow3 have decided to mark the "real" public API with the @api tag. All classes, methods, and properties tagged with @api are public in the sense that we guarantee their stability over time: their name, signature, and behavior won''t change for any minor version of the library. That''s a strong commitment; one that I like much better than any strict enforcement done on the language level.', '2013-03-17 23:07:09', 1),
(7, 'Twitter and Emails are good; Postcards are better', 'As a lead developer of Symfony, I need feedback. Symfony being an Open-Source project, there is no way I can know how many people are using it, who they are and what they do with it. That''s fine and all, but sometimes, that would really help me to know the Symfony user base a bit more. Sure enough, I have some feedback via email and Twitter. Actually, I receive tons of emails every single day about Symfony and my other Open-Source projects (with a raising number of Git pull requests... keep them coming by the way). But unfortunately, most of them are from people complaining about something or asking me some more free stuff. I must admit that this is depressing.\r\n\r\nDuring the Symfony Day conference last week, I suggested that people send me a postcard if they use Symfony. The idea is not mine, as Derick did the same a couple of years ago for XDebug.\r\n\r\nSo, if you use Symfony and enjoy it, consider sending me a postcard. Tell me why you are a Symfony user and what you do with it (if you''re not comfortable with English, that''s fine... I will also enjoy Japanese, Chinese, or Arabic postcards). You can send them to my personal address:\r\n\r\nFabien Potencier\r\n5, allÃ©e des Rosiers\r\n78670 Villennes-sur-seine\r\nFRANCE\r\n \r\nor to Sensio:\r\n\r\nSensio\r\nFabien Potencier\r\n92-98, boulevard Victor Hugo\r\n92115 Clichy\r\nFRANCE\r\n \r\nAnd I have a dream that one day I will receive a postcard each time a new Symfony website is deployed to production.', '2013-03-17 23:07:24', 1),
(8, 'Iterator or IteratorAggregate?', 'In my last two posts, I talked about PHP iterators. Here is a quick tip on the same topic.\r\n\r\nIf you have ever used iterators in your code, you have probably implemented the Iterator interface. Objects of a class that implements Iterator can be iterated over with the foreach loop:\r\n\r\n$foo = new Foo();\r\n \r\nforeach ($foo as $key => $value) {\r\n    // do something with $key and $value\r\n}\r\n \r\nThe Iterator interface has five simple methods that must be implemented:\r\n\r\nclass Foo implements Iterator\r\n{\r\n    protected $attributes;\r\n \r\n    public function rewind()\r\n    {\r\n        reset($this->attributes);\r\n    }\r\n \r\n    public function current()\r\n    {\r\n        return current($this->attributes);\r\n    }\r\n \r\n    public function key()\r\n    {\r\n        return key($this->attributes);\r\n    }\r\n \r\n    public function next()\r\n    {\r\n        return next($this->attributes);\r\n    }\r\n \r\n    public function valid()\r\n    {\r\n        return false !== current($this->attributes);\r\n    }\r\n}\r\n \r\nThe IteratorAggregate interface is quite similar (both interfaces implement Traversable) but creates an external Iterator. But when the iterator is based on an array, creating an external Iterator for this array gives you a more concise and more readable code:\r\n\r\nclass Foo implements IteratorAggregate\r\n{\r\n    protected $attributes;\r\n \r\n    public function getIterator()\r\n    {\r\n        return new ArrayIterator($this->attributes);\r\n    }\r\n}\r\n ', '2013-03-17 23:07:40', 1),
(9, 'PHP Iterators and Streams are awesome', 'A lot of people complain about "problems" with PHP as a language (function name inconsistencies, register_globals, and much more).\r\n\r\nBut PHP also have a lot of awesome features; at least two of them are in my opinion largely underused: Iterators and Streams. You won''t learn how to use them in this post, but with a simple example, I hope you will want to learn more about them.\r\n\r\nSome weeks ago, I have rewritten the old sfFinder class for Symfony 2 using Iterators. It was a really great experience and it makes for a very extensible Finder Component.\r\n\r\nThe Finder class has been designed to be used to find files and directories locally on your machine. But there is more. What if I want to use the same interface for some Amazon S3 bucket? Is it possible? Of course it is, thanks to streams:\r\n\r\nuse Symfony\\Components\\Finder\\Finder;\r\n \r\n$s3 = new \\Zend_Service_Amazon_S3($key, $secret);\r\n$s3->registerStreamWrapper("s3");\r\n \r\n$finder = new Finder();\r\n$finder->name(''photos*'')->size(''< 100K'')->date(''since 1 hour ago'');\r\nforeach ($finder->in(''s3://bucket-name'') as $file) {\r\n    // do something\r\n \r\n    print $file->getFilename()."\\n";\r\n}\r\n \r\nWant to learn more? Read the documentation about Iterators and Streams on php.net.', '2013-03-17 23:07:56', 1),
(10, 'Find your Files', 'The best practices for finding files with PHP has evolved a lot in a the last few years. Back in 2004, one of the very first thing I did with PHP was porting the File::Find::Rule Perl module to PHP. File::Find::Rule is a great way to describe the files and directories you want to work with. I used the opendir, readdir, and closedir native PHP functions, and it did the job quite well. The PHP class was named sfFinder, and it can still be found in all symfony versions. Even if the class is bundled with symfony, I know that a few people use it for all kind of stuff, not necessarily related to symfony.\r\n\r\nBut the code starts to show its age; first because I learned a lot since then about PHP, and also because there is a better way now. Enter iterators! PHP 5 comes bundled with a bunch of iterator classes that ease all kind of, well, iterations. You can iterate over an iterator with the standard foreach operator, a very powerful PHP construct.\r\n\r\nPHP Iterators\r\nSo, how do you get all the files and directories recursively with PHP iterators? Frankly, I don''t know. Well, I know more or less which classes to use and how to assemble them, but instead of thinking too hard, I always copy and paste an existing snippet of code to get it right. Here is such a snippet:\r\n\r\n// some flags to filter . and .. and follow symlinks\r\n$flags = \\FilesystemIterator::SKIP_DOTS | \\FilesystemIterator::FOLLOW_SYMLINKS;\r\n \r\n// create a simple recursive directory iterator\r\n$iterator = new \\RecursiveDirectoryIterator($dir, $flags);\r\n \r\n// make it a truly recursive iterator\r\n$iterator = new \\RecursiveIteratorIterator($iterator, \\RecursiveIteratorIterator::SELF_FIRST);\r\n \r\n// iterate over it\r\nforeach ($iterator as $file)\r\n{\r\n  // do something with $file (a \\SplFileInfo instance)\r\n}\r\n \r\nNoticed the fancy \\ character before each built-in class? That''s the way you reference built-in PHP class when using them in a PHP 5.3 namespace context.\r\n\r\nAs you can see for yourself, nothing complex. You just need to know the which Iterator to use, their possible flags, and how to compose them together. So, the first barrier of entry is the learning curve. There are a lot of great tutorials and presentations on the Internet about iterators, but the official documentation on php.net probably lacks some good examples.\r\n\r\nThe other "problem" is that everything is very object-oriented. And as soon as you want to filter the iterator, you will need to create your own classes, which seems impractical most of the time. That''s because PHP iterators are very powerful and have been written to be general-purpose iterators.\r\n\r\nWhat is filtering? Let''s say I want to exclude all files ending with .rb from the iterator. I can create a simple \\FilterIterator for that:\r\n\r\nclass ExcludeRubyFilesFilterIterator extends \\FilterIterator\r\n{\r\n  public function accept()\r\n  {\r\n    $fileinfo = $this->getInnerIterator()->current();\r\n \r\n    if (preg_match(''/\\.rb$/'', $fileinfo))\r\n    {\r\n      return false;\r\n    }\r\n \r\n    return true;\r\n  }\r\n}\r\n \r\nThis filter iterator can be used with the previous one by wrapping it like this:\r\n\r\n$iterator = new ExcludeRubyFilesFilterIterator($iterator);\r\n \r\nThat''s easy enough. But when I need to find files and directories, I always need the same kind of specialized filters, like excluding VCS files (like .svn and .git directories), filtering files by name or by size.\r\n\r\nThe Symfony Finder Component\r\nInstead of writing the same iterators over and over again, I have packaged them in a Symfony Component: the Finder component.\r\n\r\nThe Symfony Finder Component provides many specialized Iterator classes for finding files and directories. It also adds a wrapper on top of them to ease its day-to-day usage.\r\n\r\nAs any Symfony component, you first need to bootstrap your script with any class loader that is able to load classes that follows the PHP 5.3 interoperability standards, like the Symfony UniversalClassLoader class:\r\n\r\nrequire_once ''/path/to/src/Symfony/Foundation/UniversalClassLoader.php'';\r\n \r\nuse Symfony\\Foundation\\UniversalClassLoader;\r\n \r\n$classLoader = new UniversalClassLoader();\r\n$classLoader->registerNamespace(''Symfony'', ''/path/to/src'');\r\n$classLoader->register();\r\n \r\nNow, let''s see how to use the Finder class, the main class of the component:\r\n\r\nuse Symfony\\Components\\Finder\\Finder;\r\n \r\n$finder = new Finder();\r\n$iterator = $finder->files()->in(__DIR__);\r\n \r\nforeach ($iterator as $file)\r\n{\r\n  print $file->getRealpath()."\\n";\r\n}\r\n \r\nThe above code prints the names of all the files in the current directory recursively. Notice that the Finder class uses a fluent interface, which means that all methods return the Finder instance. The only exception is the in() method, which builds and returns an Iterator for the given directory, or for an array of directories:\r\n\r\n$iterator = $finder->files()->in(array(''/path1'', ''/path2''));\r\n \r\nYou can convert an iterator to an array with the iterator_to_array() method, and have the number of items with iterator_count().\r\n\r\nIf you want to restrict the iterator to only return PHP files in the current directory, use the name() and maxDepth() methods:\r\n\r\n$iterator = $finder\r\n  ->files()\r\n  ->name(''*.php'')\r\n  ->maxDepth(0)\r\n  ->in(__DIR__);\r\n \r\nThe name() method accepts globs, strings, or regexes:\r\n\r\n$finder\r\n  ->files()\r\n  ->name(''/\\.php$/'');\r\n \r\nThere is also methods to exclude files by name or to exclude whole directories content from matching:\r\n\r\n$finder\r\n  ->files()\r\n  ->name(''test.*'')\r\n  ->notName(''*.rb'')\r\n  ->exclude(''ruby'');\r\n \r\nThe result should contain files named test with any extension, but not the ones ending with .rb (it excludes test.rb), and the iterator won''t match any file in ruby directories (ruby/foo/test.php won''t match for instance).\r\n\r\nIf you want to follow links, use the followLinks() method:\r\n\r\n$finder\r\n  ->files()\r\n  ->followLinks();\r\n \r\nYou can also restrict files by size:\r\n\r\n$finder\r\n  ->files()\r\n  ->name(''/\\.php$/'')\r\n  ->size(''< 1.5K'');\r\n \r\nMost of the methods are cumulative. So, if you want to get all PHP and Python files with a size between 1 and 2 K, here is the code:\r\n\r\n$finder\r\n  ->files()\r\n  ->name(''*.php'')\r\n  ->name(''*.py/'')\r\n  ->size(''>= 1K'')\r\n  ->size(''<= 2K'');\r\n \r\nBy default, the iterator ignores popular VCS files. This can be changed with the ignoreVCS() method.\r\n\r\nAs the in() method returns an \\Iterator instance, you can wrap it with your own specialized iterator. But instead of creating a class, you can also use the filter() method:\r\n\r\n$filter = function (\\SplFileInfo $fileinfo)\r\n{\r\n  if (strlen($fileinfo) > 10)\r\n  {\r\n    return false;\r\n  }\r\n};\r\n \r\n$finder\r\n  ->files()\r\n  ->name(''*.php'')\r\n  ->filter($filter);\r\n \r\nThis example excludes all the files with a file name of more than 10 characters.\r\n\r\nWant to sort the result by name, use the sortByName() method:\r\n\r\n$finder\r\n  ->files()\r\n  ->name(''*.php'')\r\n  ->sortByName();\r\n \r\nNotice that the sort* methods need to get all matching elements to do their jobs. For large iterators, it can be rather slow.\r\n\r\nUnder the hood, the Finder class uses specialized iterator classes:\r\n\r\nChainIterator\r\nCustomFilterIterator\r\nDateRangeFilterIterator (coming soon)\r\nExcludeDirectoryFilterIterator\r\nFileTypeFilterIterator\r\nFilenameFilterIterator\r\nIgnoreVcsFilterIterator\r\nLimitDepthFilterIterator\r\nSizeRangeFilterIterator\r\nSortableIterator\r\nHave a look at the code to learn more about these iterators and how they work.', '2013-03-17 23:08:15', 0),
(11, 'The state of YAML in PHP', 'My first exposure to YAML was in 2001, back in the days when I was mainly working with Perl. Well, I was not using YAML per se at that time, but rather Data::Denter, a Perl library that provides data serialization/deserialization. I used this library mainly for debugging purposes. From its documentation:\r\n\r\n"It formats nested data structures in an indented fashion. It is optimized for human readability/editability, safe deserialization, and (eventually) speed."\r\n\r\nAt the end of the year 2002, the module was deprecated in favor of a new serialization language, YAML, with the added bonus of being programming language independent. I promptly switched to use the Perl YAML module, and I never looked back. I used YAML as a mean to debug my Perl programs, but I also started to use it more and more to store configuration data.\r\n\r\nWhen I started to use PHP at the end of 2004, one of the first thing that quickly bothered me was the poor support for YAML in the PHP world.\r\n\r\nBy the way, if symfony uses YAML a lot, it has nothing to do with Ruby on Rails ;) It just happens that Ruby also has some Perl heritage!\r\n\r\nBut first, what is YAML?\r\nAccording to the official YAML website, YAML (YAML Ain''t Markup Language), is a human friendly data serialization standard for all programming languages.\r\n\r\nYAML can be used to describe both simple and complex data structures. It''s an easy to learn language that describes data. As PHP, it has a syntax for simple types like strings, booleans, floats, integers, arrays, and even more complex ones like objects.\r\n\r\nNowadays, YAML is a heavily used format for configuration files, mainly because even non programmers are able to understand and modify YAML files easily.\r\n\r\nTo sum up the benefits of YAML, I often say that YAML files are as expressive as XML files and as readable as INI files.\r\n\r\nSince the creation of YAML, another lightweight data-interchange format has come to life: JSON. JSON is quite similar to YAML (and as a matter of fact, JSON is a subset of YAML); but even if it is easy for humans to read and write, I think it is not as readable as YAML, and a bit too verbose.\r\n\r\nYAML\r\nIf you already know what is YAML and how to use it to describe your data structures, just skip this section.\r\n\r\nBesides strings, Booleans, and numbers, let''s have a look at one of the simplest configuration structure you can describe with YAML:\r\n\r\nkey: value\r\nfoo: bar\r\n \r\nThe above snippet is the simplest way to express key/value pairs in YAML. The foo key has a bar value. The equivalent PHP code would be:\r\n\r\narray(''key'' => ''value'', ''foo'' => ''bar'')\r\n \r\nAnd that''s pretty much covers what you can do with ini files. Speaking of ini files, you can also group key/values under "sections". Here is how this is possible with YAML:\r\n\r\nsection1:\r\n  foo: bar\r\n \r\nsection2:\r\n  bar: foo\r\n \r\nThe equivalent PHP code reads as follows:\r\n\r\narray(\r\n  ''section1'' => array(''foo'' => ''bar''),\r\n  ''section2'' => array(''bar'' => ''foo''),\r\n)\r\n \r\nThat does the trick because there is several ways to describe key/value pairs. The short notation (foo: bar), and the expanded one, where you use indentation to describe nested structures as above.\r\n\r\nThe same data structure can also be described as follows:\r\n\r\nsection1: { foo: bar }\r\nsection2: { bar: foo }\r\n \r\nThe {} is how you enclose a hash. That''s one of the greatest benefit of YAML as a description format: you can visually organize your data by using one of the three possible notations.\r\n\r\nUnlike PHP, YAML makes a difference between hashes (mappings) and arrays (sequences):\r\n\r\n[1, ''a string'', "another string"]\r\n \r\nThe above snippet, a YAML sequence, is the equivalent of the following PHP code:\r\n\r\narray(1, ''a string'', "another string")\r\n \r\nIf you mix and match mappings and sequences, short and verbose notations, you can describe very complex data structures:\r\n\r\nsection1:\r\n  foo: { bar: foo }\r\n  bar: [1, 2]\r\n  foobar:\r\n    - ''a string''\r\n    - ''another one''\r\n \r\nThis section has barely scratched the surface of what you can express with YAML. If you want to learn more, you will find plenty of documentation on the Internet.\r\n\r\nYAML in PHP\r\nYAML is human-friendly, but not so developer-friendly for someone willing to write a parser for it. The YAML specification is really huge. If you read it carefully, you can easily imagine that writing a YAML parser is not an easy task. As I mainly use YAML as a configuration format like many other developers, I''m more looking for a fast, incomplete but correct library, instead of a fat, spec-compliant one.\r\n\r\nBack in 2005, I was looking for such a YAML parser and dumper for PHP. Chris Wanstrath, who will eventually create Github some years later, wrote one such limited parser and dumper, Spyc, specifically to be used as a simple configuration library.\r\n\r\nI used it for symfony 1.0. I fixed some bugs from time to time, but as time passed, I found many limitations and became more and more frustrated about it. One day, I eventually decided to write a more robust and stable YAML parser and dumper for symfony.\r\n\r\nSince then, Alexey Zakhlestin created a PECL extension that wraps the Syck library.\r\n\r\nAt the beginning of 2009, I decided to release this library as a standalone library, with no dependency whatsoever. It means that you can start using it today.\r\n\r\nThe YAML Symfony Component\r\nReleased under the MIT license, the YAML Symfony Component can be used in any application, even commercial ones.\r\n\r\nWhen I created this YAML library for PHP, I had several goals in mind:\r\n\r\nEase of use: Installation should be easy and fast. Install it via PEAR, download an archive, or checkout the SVN or Git repository, and you are ready to go. No configuration. Drop the files in a directory and start using it right away.\r\n\r\nFast: One of the main goal of Symfony YAML was to find the right balance between speed and features.\r\n\r\nUnit tested: The library is unit-tested (with more than 400 unit tests as of today).\r\n\r\n"Real" Parser: To correctly handle a large subset of the YAML specification, a dedicated and hand-written parser has been written. The parser is robust, easy to understand, and simple enough to extend.\r\n\r\nClear error messages: Whenever you have a syntax problem with your YAML files, the library should output helpful messages with the filename and the line number where the problem occurred. It eases debugging a lot.\r\n\r\nAnd of course, YAML being not so well-known in the PHP world, the YAML component also comes with a full documentation.\r\n\r\nThe easiest way to install the Symfony YAML Component is probably to use the PEAR installer:\r\n\r\n$ pear channel-discover pear.symfony-project.com\r\n$ pear install symfony/YAML\r\nUsing YAML in your Projects\r\nThe Symfony YAML library consists of two main classes: one to parse YAML strings, and the other to dump a PHP variable to a YAML string. On top of these two core classes, the main sfYaml class acts as a thin wrapper and simplifies common uses:\r\n\r\n// loading a YAML file or a YAML string\r\n$var = sfYaml::load(''/path/to/file.yml'');\r\n \r\n// Dumping a PHP variable to YAML\r\n$yaml = sfYaml::dump($var, $inline);\r\n \r\nYAML for PHP 5.3\r\nThe previous sections use the PHP 5.2 compatible version of the library. If you have already switched to use PHP 5.3, the good news is that the YAML Component is already available for that version too. For now, it is only available on the Symfony 2 Subversion repository:\r\n\r\n$ svn co http://svn.symfony-project.com/branches/2.0/lib/Symfony/Components/YAML/ YAML\r\nuse Symfony\\Components\\YAML\\YAML;\r\n \r\n// loading a YAML file or a YAML string\r\n$var = YAML::load(''/path/to/file.yml'');\r\n \r\n// Dumping a PHP variable to YAML\r\n$yaml = YAML::dump($var, $inline);\r\n \r\nThis version can be autoloaded with any autoloader that follows the standards discussed by some PHP developers. Symfony 2 provides such an autoloader:\r\n\r\nrequire_once __DIR__.''/lib/Symfony/Foundation/ClassLoader.php'';\r\n \r\nuse Symfony\\Foundation\\ClassLoader;\r\n \r\n$loader = new ClassLoader(''Symfony'', __DIR__.''/lib'');\r\n$loader->register();\r\n \r\nThe YAML Symfony Component is already used by and bundled with many popular Open-Source PHP software like symfony, Doctrine, and PHPUnit. Other frameworks like the upcoming Okapi2 framework and the mootools plugins repository, announced some days ago, make a heavy use of YAML and also use the YAML Symfony Component.\r\n\r\nNext time you look for a flexible mean to store or share data, consider using YAML!', '2013-03-17 23:08:34', 1),
(12, 'Swift Mailer Takeover', 'As you might have noticed if you follow me on Twitter, I''m the new project manager of Swift Mailer, a powerful mailing library for PHP.\r\n\r\nThis is a great honor for me to take over such a project. The Swift Mailer project has been initiated by Chris Corbyn some years ago. He has done a wonderful job during the years, trying to find the best way to create a top-notch emailing solution for PHP. With the release of the 4th version of Swift Mailer earlier this year, I think we now have a very solid mailing library. It is one of the most beautiful code I have had the pleasure to read. Also, the library is feature-rich, object-oriented, and very modular thanks to its plugin architecture. The good news is that Chris will still work on the project, so the takeover will be smooth.\r\n\r\nUnfortunately, it seems that Swift Mailer has not been as widespread as it deserves to be. One of my goal is to spread the word about it, and of course, if you are looking for a good solution to send emails, try it, you won''t be disappointed. It is already used by companies sending ten of thousands of emails per hour!\r\n\r\nAs a good news never comes alone, as we say in France, Swift Mailer 4 will also be supported as the default emailing solution as of symfony 1.3.\r\n\r\nI also have lots of ideas to move the project forward. One of them is to better support the intricacies of Japanese emails. Another one is to have better documentation, and more people talking about the project.\r\n\r\nOf course I need help. So, if you want to join a great Open-Source project, visit the Swift Mailer website today, subscribe to the mailing-list, and help us build a great PHP library!', '2013-03-17 23:08:49', 1),
(13, 'What for PHP6?', 'PHP 5.3 is just around the corner with a lot of great new features. However, even if I''m really excited about this new release, I won''t make yet another PHP 5.3 feature list; I will rather look at the future of PHP. PHP core developers met at php|tek and discussed the future of PHP. And it is really great to see that they plan lots of wonderful features; let''s set aside the Unicode stuff.\r\n\r\nThey published some notes from the meeting, and here is my personal list for things I find really interesting:\r\n\r\nAdd __cast() magic method that will be called for all casts. If the __toString() method is there it will get used for string types first.\r\n\r\nConsider making a "callable" type.\r\n\r\nMake ArrayObject and ArrayAccess accepted everywhere regular arrays are.\r\n\r\nAdd traits support.\r\n\r\nAdd type hinted return values, scalar type hints.\r\n\r\nMake function call chaining possible (f()() if f() returns a function), and array dereferencing (f()[0]).\r\n\r\nC#-style properties with getters/setters:\r\n\r\nclass Foo\r\n{\r\n   public $bar\r\n       getter { return $this->bar; }\r\n       setter { $this->bar = strtolower($value); }\r\n   ;\r\n}\r\n ', '2013-03-17 23:09:06', 1),
(14, 'On PHP 5.3, Lambda Functions, and Closures', 'PHP 5.3 will have a lot of exciting new features. One of the most important one for me is the introduction of lambda functions and closures support. I won''t talk too much about what lambda functions or closures are, as you can find many good blog posts describing them in great details. To sum up, a lambda function is an anonymous PHP function that can be stored in a variable and passed as an argument to other functions or methods. A closure is a lambda function that is aware of its surrounding context.\r\n\r\nThe first obvious use for lambda functions and closures is in conjunction with the array_map(), array_reduce(), and array_filter() native PHP functions:\r\n\r\n$input = array(1, 2, 3, 4, 5);\r\n$output = array_filter($input, function ($v) { return $v > 2; });\r\n \r\nThe above example filters the input array by removing all values greater than 2:\r\n\r\n$output == array(2 => 3, 3 => 4, 4 => 5)\r\n \r\nfunction ($v) { return $v > 2; } is the lambda function definition and it can be stored in a PHP variable to be reusable:\r\n\r\n$max_comparator = function ($v) { return $v > 2; };\r\n \r\n$input = array(1, 2, 3, 4, 5);\r\n$output = array_filter($input, $max_comparator);\r\n \r\nBut what if I want to change the maximum number allowed in the filtered array? I can either create another lambda function or use a closure:\r\n\r\n$max_comparator = function ($max)\r\n{\r\n  return function ($v) use ($max) { return $v > $max; };\r\n};\r\n \r\n$input = array(1, 2, 3, 4, 5);\r\n$output = array_filter($input, $max_comparator(2));\r\n \r\nNow, the $max_comparator function takes the maximum allowed number and returns a function that is different according to this maximum. Even for such a contrived example, I hope you see the great power it gives you!\r\n\r\nClosures also opens up a lot of great possibilities, like the implementation of the cryptic Y-combinator, as demonstrated by Stanislav Malyshev in one of his recent blog post:\r\n\r\nfunction Y($F)\r\n{\r\n  $func = function ($f) { return $f($f); };\r\n \r\n  return $func(function ($f) use($F)\r\n  {\r\n    return $F(function ($x) use($f)\r\n    {\r\n      $ff = $f($f);\r\n \r\n      return $ff($x);\r\n    });\r\n  });\r\n}\r\n \r\nToday, I want to talk about yet great another example on how to use lambda functions and closures. You will see that it can simplify your code a lot when used appropriately.\r\n\r\nIf you have read my blog recently, you know that I am quite obsessed with dependency injection these days. This post will show you how to implement a very simple but still full-featured dependency injection container, thanks to the new features of PHP 5.3.\r\n\r\nA dependency injection container must be able to manage two different kind of data: objects and parameters. And objects must be created on-demand the first time they are accessed from the container.\r\n\r\nUsing a simple class that implements the magic __get() and __set() methods, we can easily manage both the objects and the parameters:\r\n\r\nclass DIContainer\r\n{\r\n  protected $values = array();\r\n \r\n  function __set($id, $value)\r\n  {\r\n    $this->values[$id] = $value;\r\n  }\r\n \r\n  function __get($id)\r\n  {\r\n    return is_callable($this->values[$id]) ? $this->values[$id]($this) : $this->values[$id];\r\n  }\r\n}\r\n \r\nUsing the container is quite simple:\r\n\r\n$container = new DIContainer();\r\n \r\n// define the parameters\r\n$container->cookie_name = ''SESSION_ID'';\r\n$container->storage_class = ''SessionStorage'';\r\n \r\n// defined the objects\r\n$container->storage = function ($c)\r\n{\r\n  return new $c->storage_class($c->cookie_name);\r\n};\r\n$container->user = function ($c)\r\n{\r\n  return new User($c->storage);\r\n};\r\n \r\n// get the user object\r\n$user = $container->user;\r\n \r\n// the above call is roughly equivalent to the following code:\r\n// $storage = new SessionStorage(''SESSION_ID'');\r\n// $user = new User($storage);', '2013-03-17 23:09:22', 1);
INSERT INTO `article` (`id`, `title`, `content`, `date`, `enabled`) VALUES
(15, 'Why Symfony?', 'Yesterday, Zend Framework 2.0 and Symfony 2.1 were released... almost at the same time. First, I want to congratulate the Zend Framework team for this huge milestone; I know that working on a new major version is no small task.\r\n\r\nAnd of course, people started to ask questions about these new versions and one of the most popular was: "Why would I choose framework X over framework Y?". As you can imagine, the answer is not that easy as each framework has its own specificities.\r\n\r\nI like to think that most popular frameworks are modular enough, fast enough, well-documented enough; they are using well-known design patterns. So, besides the buzzwords, what is unique to Symfony? Why would you want to use Symfony instead of X (replace X with ZF, CakePHP, Lithium, Laravel, Slim, Yii, you name it)? That''s the question I''m going to answer in this post.\r\n\r\nSo, without further ado, here are my main selling points for Symfony:\r\n\r\nSymfony is not a framework but a project. Depending on your needs, you can choose to use some of the Symfony Components, the Silex micro-framework, or the full-stack framework.\r\n\r\nSymfony is used by many large companies (like the BBC or CBS), by many large websites (like TED, wetter.com, Lockers or even YouPorn just to name a few) and some Open-Source projects are also powered by Symfony (CMSes like Drupal or eZpublish, libraries like PHPUnit or Doctrine, products like phpBB or shopware, and even frameworks like PPI or Laravel). This brings a lot of interoperability between all these solutions.\r\n\r\nSymfony enjoys a huge community of users and contributors; during the last year alone, 550+ people contributed to the Symfony core and the community created over 1,600 bundles for the full-stack framework. Symfony also has several annual dedicated conferences around the world and a large number of user groups.\r\n\r\nSymfony has been created in 2005 and here to stay. Besides SensioLabs, many other companies rely on Symfony for their clients and they contribute, invest money, and sponsor the future of the project.\r\n\r\nSymfony embraces the "don''t reinvent the wheel" philosophy, and provides tight integration with many other Open-Source projects (like Monolog, Assetic, Doctrine, Propel, ...).\r\n\r\nSymfony tries to bring innovation to PHP: it was one of the first major frameworks to embrace PHP 5.3, to introduce the usage of a Dependency Injection container, and to use a templating engine for its templates by default, Twig, which is now also adopted by major CMSes like Drupal and eZpublish. Symfony also has some unique features like its gorgeous debug toolbar and its great built-in profiler.\r\n\r\nIf you think I''ve missed some important selling points, feel free to list them in the comments and in a few days, I will aggregate everything in a new page that will be hosted on symfony.com to help users make an informed decision when choosing a framework.\r\n\r\nAnd if other frameworks would like to do the same, I would happily add links to their pages on the Symfony one, and if in turn, they do the same, that would create a ring of links that will ease the choice of a PHP framework for developers.', '2013-03-17 23:09:40', 1);

-- --------------------------------------------------------

--
-- Structure de la table `user`
--

CREATE TABLE IF NOT EXISTS `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;

--
-- Contenu de la table `user`
--

INSERT INTO `user` (`id`, `username`, `password`) VALUES
(1, 'admin', 'd033e22ae348aeb5660fc2140aec35850c4da997');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
